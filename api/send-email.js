// Vercel API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
import { Resend } from "resend";

const resend = new Resend(process.env.RESEND_API_KEY);

export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    res.status(200).end();
    return;
  }

  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  console.log("API Key exists:", !!process.env.RESEND_API_KEY);
  console.log("Request body:", req.body);

  try {
    const { type, data } = req.body;

    let emailResult;

    switch (type) {
      case "new_submission":
        emailResult = await sendNewSubmissionEmail(
          data.adminEmail,
          data.studentName,
          data.assignmentTitle
        );
        break;

      case "submission_graded":
        emailResult = await sendGradedSubmissionEmail(
          data.studentEmail,
          data.assignmentTitle,
          data.score,
          data.maxScore,
          data.feedback
        );
        break;

      default:
        return res.status(400).json({ error: "Invalid notification type" });
    }

    if (emailResult.success) {
      res
        .status(200)
        .json({ success: true, message: "Email sent successfully" });
    } else {
      res.status(500).json({ success: false, error: emailResult.error });
    }
  } catch (error) {
    console.error("Email API error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ
async function sendNewSubmissionEmail(
  adminEmail,
  studentName,
  assignmentTitle
) {
  try {
    const { data, error } = await resend.emails.send({
      from: "–°–∞–π—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <onboarding@resend.dev>",
      to: adminEmail,
      subject: "üìù –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
      html: getNewSubmissionTemplate(studentName, assignmentTitle),
    });

    if (error) {
      console.error("Error sending new submission email:", error);
      return { success: false, error: error.message };
    }

    console.log("New submission email sent:", data);
    return { success: true, data };
  } catch (error) {
    console.error("Error sending email:", error);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
async function sendGradedSubmissionEmail(
  studentEmail,
  assignmentTitle,
  score,
  maxScore,
  feedback
) {
  try {
    const { data, error } = await resend.emails.send({
      from: "–°–∞–π—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <onboarding@resend.dev>",
      to: studentEmail,
      subject: "‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!",
      html: getGradedSubmissionTemplate(
        assignmentTitle,
        score,
        maxScore,
        feedback
      ),
    });

    if (error) {
      console.error("Error sending graded submission email:", error);
      return { success: false, error: error.message };
    }

    console.log("Graded submission email sent:", data);
    return { success: true, data };
  } catch (error) {
    console.error("Error sending email:", error);
    return { success: false, error: error.message };
  }
}

// –®–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ
function getNewSubmissionTemplate(studentName, assignmentTitle) {
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <title>–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #4f46e5; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background: #4f46e5; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 0; }
          .footer { text-align: center; margin-top: 20px; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üìù –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</h1>
          </div>
          <div class="content">
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
            <p><strong>${studentName}</strong> –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ä–∞–±–æ—Ç—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:</p>
            <p><strong>–ó–∞–¥–∞–Ω–∏–µ:</strong> ${assignmentTitle}</p>
            <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã:</p>
            <a href="https://ege100.vercel.app" class="button">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ</a>
          </div>
          <div class="footer">
            <p>–°–∞–π—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏<br>
            –î–º–∏—Ç—Ä–∏–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á –¢–µ–ø–ª—è—à–∏–Ω</p>
          </div>
        </div>
      </body>
    </html>
  `;
}

// –®–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
function getGradedSubmissionTemplate(
  assignmentTitle,
  score,
  maxScore,
  feedback
) {
  const percentage = Math.round((score / maxScore) * 100);
  const gradeEmoji = percentage >= 80 ? "üéâ" : percentage >= 60 ? "üëç" : "üìö";

  return `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <title>–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #10b981; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; }
          .score { background: #e0f2fe; padding: 15px; border-radius: 6px; text-align: center; margin: 15px 0; }
          .score-value { font-size: 24px; font-weight: bold; color: #0277bd; }
          .feedback { background: #fff3cd; padding: 15px; border-radius: 6px; margin: 15px 0; }
          .button { display: inline-block; background: #10b981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 0; }
          .footer { text-align: center; margin-top: 20px; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!</h1>
          </div>
          <div class="content">
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
            <p>–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é <strong>"${assignmentTitle}"</strong> –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:</p>
            
            <div class="score">
              <div class="score-value">${gradeEmoji} ${score} –∏–∑ ${maxScore} –±–∞–ª–ª–æ–≤</div>
              <div>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage}%</div>
            </div>

            ${
              feedback
                ? `
              <div class="feedback">
                <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</strong><br>
                ${feedback}
              </div>
            `
                : ""
            }

            <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:</p>
            <a href="https://ege100.vercel.app" class="button">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç</a>
          </div>
          <div class="footer">
            <p>–°–∞–π—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏<br>
            –î–º–∏—Ç—Ä–∏–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á –¢–µ–ø–ª—è—à–∏–Ω</p>
          </div>
        </div>
      </body>
    </html>
  `;
}
