// Gemini AI service for automatic assignment evaluation
// Free API - up to 60 requests per minute, 1500 requests per day

import { cleanCodeForAI } from './codeUtils';

interface AssignmentData {
  title: string;
  description: string;
  maxScore: number;
  imageUrls?: string[];
}

interface SubmissionData {
  imageUrls?: string[];
  textContent?: string;
}

interface AIEvaluationResult {
  completionProbability: number; // 0-100%
  suggestedScore: number;
  feedback: string;
  criteriaAnalysis: {
    criterion: string;
    percentage: number;
    reasoning: string;
  }[];
  overallReasoning: string;
}

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || "";
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";

export async function evaluateSubmissionWithAI(
  assignment: AssignmentData,
  submission: SubmissionData
): Promise<AIEvaluationResult> {
  if (!GEMINI_API_KEY) {
    throw new Error("Gemini API key not configured");
  }

  // Clean and extract the student's code for AI analysis
  const cleanedCode = submission.textContent ? cleanCodeForAI(submission.textContent) : "";
  
  console.log("Original submission:", submission.textContent?.substring(0, 200) + "...");
  console.log("Cleaned code for AI:", cleanedCode);

  const prompt = `
–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏. –û—Ü–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º.

–í–ê–ñ–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –æ—Ç—Å—Ç—É–ø—ã, —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é). –û—Ü–µ–Ω–∏–≤–∞–π —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è.

–ó–ê–î–ê–ù–ò–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${assignment.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${assignment.description}
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: ${assignment.maxScore}
${
  assignment.imageUrls?.length
    ? `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${assignment.imageUrls.length} —à—Ç.`
    : ""
}

–†–ê–ë–û–¢–ê –£–ß–ï–ù–ò–ö–ê:
${submission.textContent ? `–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: ${submission.textContent}` : ""}
${cleanedCode ? `
–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
\`\`\`
${cleanedCode}
\`\`\`
` : ""}
${
  submission.imageUrls?.length
    ? `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: ${submission.imageUrls.length} —à—Ç.`
    : ""
}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¶–ï–ù–ö–ï:
1. –û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (0-100%)
2. –ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ ${assignment.maxScore}
3. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
5. –£–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ü–µ–Ω–∫–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "completionProbability": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "suggestedScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${assignment.maxScore},
  "feedback": "–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —É—á–∏—Ç–µ–ª—è –ø—Ä—è–º–æ, –ø–∏—à–∏ —É—á–µ–Ω–∏–∫—É –Ω–∞ –¢–´",
  "criteriaAnalysis": [
    {
      "criterion": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è",
      "percentage": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
      "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
    }
  ],
  "overallReasoning": "–æ–±—â–µ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"
}

–ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º, –Ω–∞ –º–µ–ª–∫–∏–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫ –≤–Ω–∏–º–∞–Ω–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–π, —ç—Ç–æ –Ω—é–∞–Ω—Å—ã –ø–ª–∞—Ç—Ñ–æ–º—ã, –æ–Ω–∏ —Ç–∞–∫ –ø—Ä–∏—Ö–æ–¥—è—Ç, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
`;

  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
            ],
          },
        ],
        generationConfig: {
          temperature: 0.3,
          topK: 1,
          topP: 1,
          maxOutputTokens: 1024,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error(`API request failed: ${response.status}`);
    }

    const data = await response.json();

    if (
      !data.candidates ||
      !data.candidates[0] ||
      !data.candidates[0].content
    ) {
      throw new Error("Invalid API response format");
    }

    const aiText = data.candidates[0].content.parts[0].text;

    // Clean up the response and parse JSON
    const cleanJson = aiText
      .replace(/```json\n?/g, "")
      .replace(/```/g, "")
      .trim();

    try {
      const result: AIEvaluationResult = JSON.parse(cleanJson);

      // Validate the result
      if (
        typeof result.completionProbability !== "number" ||
        typeof result.suggestedScore !== "number" ||
        typeof result.feedback !== "string" ||
        !Array.isArray(result.criteriaAnalysis) ||
        typeof result.overallReasoning !== "string"
      ) {
        throw new Error("Invalid result format from AI");
      }

      // Ensure values are within bounds
      result.completionProbability = Math.max(
        0,
        Math.min(100, result.completionProbability)
      );
      result.suggestedScore = Math.max(
        0,
        Math.min(assignment.maxScore, result.suggestedScore)
      );

      return result;
    } catch (parseError) {
      console.error("Failed to parse AI response:", cleanJson);
      throw new Error("Failed to parse AI evaluation result");
    }
  } catch (error) {
    console.error("AI evaluation error:", error);
    throw error;
  }
}

// Helper function to format AI feedback for display
export function formatAIFeedback(evaluation: AIEvaluationResult): string {
  let feedback = `ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑:\n\n`;
  feedback += `üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${evaluation.completionProbability}%\n`;
  feedback += `üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞: ${evaluation.suggestedScore}\n\n`;
  feedback += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${evaluation.feedback}\n\n`;

  if (evaluation.criteriaAnalysis.length > 0) {
    feedback += `üìã –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n`;
    evaluation.criteriaAnalysis.forEach((criterion, index) => {
      feedback += `${index + 1}. ${criterion.criterion}: ${
        criterion.percentage
      }% - ${criterion.reasoning}\n`;
    });
    feedback += `\n`;
  }

  feedback += `üîç –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${evaluation.overallReasoning}`;

  return feedback;
}
